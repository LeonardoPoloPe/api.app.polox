/**
 * ==========================================
 * 游논 ROTAS DE USU츼RIOS
 * ==========================================
 */

const express = require("express");
const UserController = require("../controllers/userController");
const {
  authenticateToken,
  requireCompanyAdmin,
  requireSuperAdmin,
} = require("../middleware/auth");
const { rateLimiter } = require("../middleware/rateLimiter");
const { validateRequest } = require("../utils/validation");
const Joi = require("joi");

const router = express.Router();

// 游댏 Middleware obrigat칩rio: autentica칞칚o
router.use(authenticateToken);

// 游닇 Valida칞칫es espec칤ficas
const updateProfileValidation = Joi.object({
  name: Joi.string().min(2).max(255),
  email: Joi.string().email(),
});

/**
 * @swagger
 * /users:
 *   get:
 *     summary: Listar usu치rios
 *     description: Lista todos os usu치rios com pagina칞칚o e busca
 *     tags: [Usu치rios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AcceptLanguage'
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: P치gina da consulta
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *           maximum: 100
 *         description: Itens por p치gina
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Busca por nome ou email
 *     responses:
 *       200:
 *         description: Lista de usu치rios
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     users:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/User'
 *                     pagination:
 *                       $ref: '#/components/schemas/PaginationInfo'
 */
router.get("/", rateLimiter.general, UserController.getUsers);

/**
 * @swagger
 * /users/profile:
 *   get:
 *     summary: Obter perfil do usu치rio autenticado
 *     description: Retorna informa칞칫es do usu치rio logado
 *     tags: [Usu치rios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AcceptLanguage'
 *     responses:
 *       200:
 *         description: Perfil do usu치rio
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     user:
 *                       $ref: '#/components/schemas/User'
 */
router.get("/profile", rateLimiter.general, UserController.getProfile);
// Alias para compatibilidade com testes: /users/me
router.get("/me", rateLimiter.general, UserController.getProfile);

/**
 * @swagger
 * /users/profile:
 *   put:
 *     summary: Atualizar perfil do usu치rio
 *     description: Atualiza informa칞칫es do perfil do usu치rio autenticado
 *     tags: [Usu치rios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AcceptLanguage'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 minLength: 2
 *                 maxLength: 255
 *                 example: "Jo칚o Silva"
 *               email:
 *                 type: string
 *                 format: email
 *                 example: "joao@exemplo.com"
 *     responses:
 *       200:
 *         description: Perfil atualizado com sucesso
 *       400:
 *         description: Dados inv치lidos
 *       409:
 *         description: Email j치 est치 em uso
 */
router.put(
  "/profile",
  rateLimiter.general,
  validateRequest(updateProfileValidation),
  UserController.updateProfile
);

/**
 * @swagger
 * /users/{id}:
 *   get:
 *     summary: Obter usu치rio por ID
 *     description: Retorna informa칞칫es de um usu치rio espec칤fico
 *     tags: [Usu치rios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AcceptLanguage'
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do usu치rio
 *     responses:
 *       200:
 *         description: Dados do usu치rio
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     user:
 *                       $ref: '#/components/schemas/User'
 *       404:
 *         description: Usu치rio n칚o encontrado
 */
router.get("/:id", rateLimiter.general, UserController.getUserById);

module.exports = router;
