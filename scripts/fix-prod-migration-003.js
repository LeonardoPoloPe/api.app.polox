#!/usr/bin/env node

/**
 * Script para resolver o problema da migration 003 em PRODU√á√ÉO
 * Marca a migration como executada sem rodar o c√≥digo
 */

const { Pool } = require("pg");

// ‚ö†Ô∏è SCRIPT DESABILITADO - CREDENCIAIS REMOVIDAS POR SEGURAN√áA
console.error(`
‚ùå SCRIPT DESABILITADO!

üîê Por motivos de seguran√ßa, as credenciais foram removidas.
üéØ Este script j√° foi executado e n√£o √© mais necess√°rio.

‚úÖ Use o novo sistema seguro:
   node scripts/migrate-environment.js prod status

üìñ Documenta√ß√£o: docs/POLITICAS_SEGURANCA_CREDENCIAIS.md
`);

process.exit(1);

async function fixMigration003() {
  try {
    console.log(
      "‚ö†Ô∏è  ATEN√á√ÉO: VOC√ä EST√Å PRESTES A MODIFICAR O BANCO DE PRODU√á√ÉO!\n"
    );
    console.log("üîê Certifique-se de que voc√™ tem autoriza√ß√£o para isso.\n");
    console.log("‚è±Ô∏è  Aguardando 3 segundos...\n");

    await new Promise((resolve) => setTimeout(resolve, 3000));

    console.log("üîç Verificando tabelas existentes em PRODU√á√ÉO...\n");

    // Ver quantas tabelas existem
    const tablesResult = await pool.query(`
      SELECT COUNT(*) as count 
      FROM information_schema.tables 
      WHERE table_schema = 'polox'
    `);

    console.log(
      `üìä Total de tabelas no schema polox: ${tablesResult.rows[0].count}\n`
    );

    // Listar algumas tabelas importantes
    const importantTables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'polox' 
        AND table_name IN ('leads', 'clients', 'sales', 'products', 'companies', 'users')
      ORDER BY table_name
    `);

    console.log("üìã Tabelas importantes encontradas:");
    importantTables.rows.forEach((row) => {
      console.log(`   ‚úì ${row.table_name}`);
    });

    console.log("\nüîç Verificando migrations executadas...\n");

    const migrationsResult = await pool.query(`
      SELECT name, executed_at 
      FROM migrations 
      ORDER BY executed_at
    `);

    console.log("‚úÖ Migrations executadas:");
    migrationsResult.rows.forEach((row) => {
      console.log(`   ${row.name} - ${row.executed_at}`);
    });

    // Verificar se 003 j√° est√° registrada
    const migration003 = migrationsResult.rows.find(
      (r) => r.name === "003_add_complete_polox_schema"
    );

    if (migration003) {
      console.log("\n‚ö†Ô∏è  Migration 003 j√° est√° registrada! Nada a fazer.");
    } else {
      console.log("\nüìù Migration 003 N√ÉO est√° registrada.");
      console.log("\n‚ùì Marcando a migration 003 como executada...");
      console.log(
        "   Isso √© seguro porque a migration 005 j√° criou as tabelas necess√°rias.\n"
      );

      // Marcar como executada
      await pool.query(`
        INSERT INTO migrations (name, executed_at) 
        VALUES ('003_add_complete_polox_schema', NOW())
      `);

      console.log("‚úÖ Migration 003 marcada como executada em PRODU√á√ÉO!\n");
    }

    console.log("üéâ Processo conclu√≠do!\n");
  } catch (error) {
    console.error("‚ùå Erro:", error.message);
  } finally {
    await pool.end();
  }
}

fixMigration003();
